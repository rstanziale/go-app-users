{
	"info": {
		"_postman_id": "cd8b6592-5ba0-45cc-9789-050d50d24b25",
		"name": "Go app users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9571882"
	},
	"item": [
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Email is in a valid format', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.exist.and.to.be.an('array');",
							"    responseData.response.forEach(function (user) {",
							"        pm.expect(user.Email).to.exist.and.to.match(/\\S+@\\S+\\.\\S+/);",
							"    });",
							"})",
							"",
							"pm.test('Verify that the \\'response\\' array is present and contains at least one element', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/get",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('Id');",
							"    pm.expect(responseData).to.have.property('Name');",
							"    pm.expect(responseData).to.have.property('Email');",
							"})",
							"",
							"pm.test('Email is in a valid format', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response.Email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"})",
							"",
							"pm.test('Response time is within an acceptable range', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/get/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"get",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'ok' field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.ok).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the value of the 'ok' field is true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.ok).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is in JSON format\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/delete/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"delete",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "19"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object with response property\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('response');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "email",
							"value": "jphn@mail.it",
							"type": "text"
						},
						{
							"key": "password",
							"value": "jjj",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'ok'\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.have.property('ok');",
							"});",
							"",
							"",
							"pm.test(\"The 'ok' field should be a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.ok).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "userId",
							"value": "1",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Bob",
							"type": "text"
						},
						{
							"key": "password",
							"value": "aaa",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"update"
					]
				}
			},
			"response": []
		}
	]
}